on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    #container: pandaofficial/timeswipe_ubuntu
    steps:
      - name: using custom container
        uses: docker://pandaofficial/timeswipe_ubuntu:latest
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        id: build_project
        run: |
          #sudo apt-get -y update && DEBIAN_FRONTEND=noninteractive sudo apt -y install binutils-aarch64-linux-gnu g++-aarch64-linux-gnu gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf make cmake gcc g++ libboost-all-dev git
          git clone https://github.com/nlohmann/json driver/3rdParty/nlohmann #XXX: until submodule issue resolved in actions        
          cd driver
          mkdir build64
          cd build64
          cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..
          make
          export destdir="$PWD"/timeswipe_`cat ../version`.aarch64
          make -j DESTDIR=$destdir install
          cp -p -r DEBIAN $destdir
          dpkg-deb --build $destdir
          echo ::set-output name=deb64::$(ls *.deb)
          cd ..
          mkdir build32
          cd build32
          cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DARM32=True ..
          make
          export destdir="$PWD"/timeswipe_`cat ../version`.armv7l
          make -j DESTDIR=$destdir install
          cp -p -r DEBIAN $destdir
          dpkg-deb --build $destdir
          echo ::set-output name=deb32::$(ls *.deb)
          cd ..
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload aarch64
        id: upload-release-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./driver/build64/${{ steps.build_project.outputs.deb64 }}
          asset_name: ${{ steps.build_project.outputs.deb64 }}
          asset_content_type: application/octet-stream
      - name: Upload armv7l
        id: upload-release-armv7l
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./driver/build32/${{ steps.build_project.outputs.deb32 }}
          asset_name: ${{ steps.build_project.outputs.deb32 }}
          asset_content_type: application/octet-stream
