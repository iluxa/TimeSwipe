on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Issue Release

jobs:
  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
  publish_deb:
    name: Upload Release deb packages
    needs: [release]
    runs-on: ubuntu-latest
    container: pandaofficial/timeswipe_ubuntu
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
            name: release_url
      - name: Build project
        id: build_project
        run: |
          git clone https://github.com/nlohmann/json driver/3rdParty/nlohmann #XXX: until submodule issue resolved in actions        
          cd driver
          mkdir build64
          cd build64
          cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..
          make
          export destdir="$PWD"/timeswipe_`cat ../version`.aarch64
          make -j DESTDIR=$destdir install
          cp -p -r DEBIAN $destdir
          dpkg-deb --build $destdir
          echo ::set-output name=deb64::$(ls *.deb)
          cd ..
          mkdir build32
          cd build32
          cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DARM32=True ..
          make
          export destdir="$PWD"/timeswipe_`cat ../version`.armv7l
          make -j DESTDIR=$destdir install
          cp -p -r DEBIAN $destdir
          dpkg-deb --build $destdir
          echo ::set-output name=deb32::$(ls *.deb)
          cd ..
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
            value=`cat release_url/release_url.txt`
            echo ::set-output name=upload_url::$value
        env:
            TAG_REF_NAME: ${{ github.ref }}
            REPOSITORY_NAME: ${{ github.repository }}
      - name: Upload aarch64
        id: upload-release-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./driver/build64/${{ steps.build_project.outputs.deb64 }}
          asset_name: ${{ steps.build_project.outputs.deb64 }}
          asset_content_type: application/octet-stream
      - name: Upload armv7l
        id: upload-release-armv7l
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./driver/build32/${{ steps.build_project.outputs.deb32 }}
          asset_name: ${{ steps.build_project.outputs.deb32 }}
          asset_content_type: application/octet-stream

  publish_arch:
    name: Upload Release arch packages
    needs: [release]
    runs-on: ubuntu-latest
    container: pandaofficial/timeswipe_arch
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
            name: release_url
      - name: Build project
        id: build_project
        run: |
          git clone https://github.com/nlohmann/json driver/3rdParty/nlohmann #XXX: until submodule issue resolved in actions        
          cd driver
          mkdir build64
          cd build64
          cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..
          make
          export destdir="$PWD"/timeswipe_`cat ../version`
          cd .. && chown -R build build64 && cd build64 && sudo -u build makepkg && mv *.xz ..
          cd ..
          echo ::set-output name=arch64::$(ls *.xz)
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
            value=`cat release_url/release_url.txt`
            echo ::set-output name=upload_url::$value
        env:
            TAG_REF_NAME: ${{ github.ref }}
            REPOSITORY_NAME: ${{ github.repository }}
      - name: Upload arch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./driver/build64/${{ steps.build_project.outputs.arch64 }}
          asset_name: ${{ steps.build_project.outputs.arch64 }}
          asset_content_type: application/octet-stream

